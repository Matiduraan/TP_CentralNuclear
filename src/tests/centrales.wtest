import ciudades.*
import centrales.* 
import region.*

describe "contexto las centrales en la region"{
	
	const ciudad = springfield
	const unaRegion = region
	
	fixture {
		centralAtomicaBurns.varillas(10)
		centralDeCarbonExBosque.capacidad(20)
		ciudad.centrales([centralAtomicaBurns,centralDeCarbonExBosque,centralEolicaElSuspiro])
	}
	
	test "test la Central Atomica Burns produce,con 10 varillas, 1Mkwh en springfield" {
		
		assert.equals(1,ciudad.produccionEnergetica(centralAtomicaBurns)) 

	}

	test "test la Central de Carbon Ex-Bosque produce, con 20 toneladas, 18.5Mkwh" {
		
		assert.equals(18.5,ciudad.produccionEnergetica(centralDeCarbonExBosque))
	}
	
	test "test la Central Eolica El Suspiro produce 2Mkwh" {
		
		assert.equals(2,ciudad.produccionEnergetica(centralEolicaElSuspiro))
	}
	
	test "test las centrales contaminantes es una coleccion que solo tiene la central Ex-Bosque"{
		
		assert.equals(1,(ciudad.centralesContaminantes()).size())
		
		assert.that((ciudad.centralesContaminantes()).contains(centralDeCarbonExBosque))
	}
	
	test "test las centrales cubrieron la necesidad energetica de 20Kwh"{
		
		assert.that(ciudad.cubrioNecesidadEnergetica(20))
	}
	
	test "test springfield esta al horno si posee una necesidad energetica de 30Mkwh"{
		
		assert.that(ciudad.estaAlHorno(30))
	}
	
	test "test las centrales mas productoras de la region es una coleccion con Ex-Bosque y la central hidroelectrica"{
		assert.equals(2,(unaRegion.centralesMasProductoras()).size())
		assert.that((unaRegion.centralesMasProductoras()).contains(centralDeCarbonExBosque))
		assert.that((unaRegion.centralesMasProductoras()).contains(centralHidroElectrica))
	}
	
}


